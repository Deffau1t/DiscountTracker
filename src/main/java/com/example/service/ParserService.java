package com.example.service;

import com.example.entity.PriceHistory;
import com.example.entity.Product;
import com.example.repository.PriceHistoryRepository;
import io.github.bonigarcia.wdm.WebDriverManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;

@Service
@RequiredArgsConstructor
@Slf4j
public class ParserService {

    private final PriceHistoryRepository priceHistoryRepository;
    private final RestTemplate restTemplate = new RestTemplate();

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
     * @param product - –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
     * @return BigDecimal - —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    public BigDecimal parsePrice(Product product) {
        if (product.getSource().equalsIgnoreCase("my")) {
            // ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞, –µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ "my"
            return fetchPriceFromLocal(product);
        } else {
            // ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∞–π—Ç–∞ —á–µ—Ä–µ–∑ Selenium
            return fetchPriceFromWeb(product);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.
     * @return BigDecimal - —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    private BigDecimal fetchPriceFromLocal(Product product) {
        try {
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ URL
            String productId = product.getUrl().substring(product.getUrl().lastIndexOf("/") + 1);

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            String apiUrl = "http://localhost:8081/products/api/" + productId;

            log.info("üåê –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {}", apiUrl);

            // –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
            BigDecimal price = restTemplate.getForObject(apiUrl, BigDecimal.class);

            if (price != null) {
                log.info("üí∞ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è ID {}: {}", productId, price);
                savePriceToHistory(product, price); // ‚úÖ –¢–µ–ø–µ—Ä—å product –ø–µ—Ä–µ–¥–∞–Ω –≤ savePriceToHistory
                return price;
            } else {
                log.warn("‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è ID: {}", productId);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É: {}", e.getMessage());
        }
        return null;
    }


    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∞–π—Ç–∞ —Å –ø–æ–º–æ—â—å—é Selenium.
     * @param product - –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
     * @return BigDecimal - —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    private BigDecimal fetchPriceFromWeb(Product product) {
        WebDriverManager.chromedriver().setup();

        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless");
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");

        WebDriver driver = new ChromeDriver(options);
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        try {
            driver.get(product.getUrl());
            log.info("üåê –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}", product.getUrl());

            WebElement priceElement = switch (product.getSource().toLowerCase()) {
                case "dns" -> driver.findElement(By.cssSelector(".product-buy__price"));
                case "citilink" -> {
                    try {
                        yield driver.findElement(By.cssSelector("[data-meta-name='PriceBlock'] span[data-meta-price]"));
                    } catch (Exception e) {
                        try {
                            yield driver.findElement(By.cssSelector(".ProductHeader__price-default_current-price"));
                        } catch (Exception e2) {
                            yield driver.findElement(By.cssSelector(".ProductPrice__price-current_current-price"));
                        }
                    }
                }
                case "ozon" -> {
                    try {
                        yield driver.findElement(By.cssSelector("[data-widget='webPrice'] span"));
                    } catch (Exception e) {
                        yield driver.findElement(By.cssSelector(".nl8 span"));
                    }
                }
                default -> throw new IllegalArgumentException("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: " + product.getSource());
            };

            String priceText = priceElement.getText().replaceAll("[^0-9]", "");
            if (!priceText.isEmpty()) {
                BigDecimal price = new BigDecimal(priceText);
                log.info("üí∞ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è {}: {}", product.getName(), price);
                savePriceToHistory(product, price);
                return price;
            } else {
                log.warn("‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {} –Ω–∞ —Å–∞–π—Ç–µ {}", product.getName(), product.getSource());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ü–µ–Ω—ã –¥–ª—è {}: {}", product.getName(), e.getMessage());
        } finally {
            driver.quit();
        }
        return null;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞.
     * @param product - –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param price - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
     */
    private void savePriceToHistory(Product product, BigDecimal price) {
        PriceHistory priceHistory = new PriceHistory();
        priceHistory.setProduct(product);
        priceHistory.setPrice(price);
        priceHistory.setCheckedAt(LocalDateTime.now());
        priceHistoryRepository.save(priceHistory);

        log.info("üíæ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {}: {}", product.getName(), price);
    }
}
